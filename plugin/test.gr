
main {
    /*loop {
        let a = vec2f(5.0, 5.0);
        let b = vec2f(1270.0, 710.0);
        drawFilledRect(a, b);
        yield
    }*/
}

event onNote(Note note) {
    Vec2f screenSize = Vec2f(1280.0, 720.0);
    let value = note_getPitch(note);
    let step = note_getStep(note);
    let tick = note_getTick(note);

    let pitch = (1.0 - (value as float / 128.0)) * screenSize.y;
    let size = Vec2f(step as float / 6.0, screenSize.y / 128.0);

    print("onNote: " ~ (value as string));
    
    loop {
        let position = Vec2f((tick - seq_getTick()) as float / 6.0 + screenSize.x / 2.0, pitch);
        let orig = position;// - (size / 2.0);

        //print(note_getPitch(channel, note) as string);

        //print("rect: " ~ position as string ~ ", " ~ size as string);

        fillRect(orig, size, Color(1f, 0f, 0f));
        let factor = note_getFactor(note);
        if((factor >= 0.0) and (factor <= 1.0)) {
            //orig.x = position.x - size.x / 2.0;
        // orig.y = position.y - size.y / 2.0;
            //print("Pos: " ~ orig.x as string ~ ", " ~ orig.y as string);
            //print("Size: " ~ size as string);
        }
        yield
    }
}


/*
event onNoteInRange(Note note) {
    let pitch = (1.0 - (note.value as float / 128.0)) * screenSize.y;
    let position = Vec2((note.tick - seq_getTick()) as float / 6.0 + screenSize.x / 2.0, pitch);
    let size = Vec2(note.step as float / 6.0, screenSize.y / 128.0);
    drawFilledRect(position, size);
}
*/
/*
func operator/(vec2f v, float s) {
    return vec2f(v.x / s, v.y / s);
}

func operator-(vec2f v, vec2f w) {
    return vec2f(v.x - w.x, v.y - w.y);
}

func operator!=(vec2f v, vec2f w) {
    return vec2f(v.x - w.x, v.y - w.y);
}*/