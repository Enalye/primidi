/** 
 * Copyright: Enalye
 * License: Zlib
 * Authors: Enalye
 */
array(Canvas) canvases;
Texture spriteSheet;
let width, height = 1280f, 720f;

let colors = [
    [109, 247, 193],
    [17, 173, 193],
    [96, 108, 129],
    [57, 52, 87],
    [30, 136, 117],
    [91, 179, 97],
    [161, 229, 90],
    [247, 228, 118],
    [249, 146, 82],
    [203, 77, 104],
    [106, 55, 113],
    [201, 36, 100],
    [244, 140, 182],
    [247, 182, 158],
    [155, 156, 130],
    [49, 122, 215]
];

main {
    let centerX, centerY = width / 2f, height / 2f;

    // Rendering canvas.
    setCameraSize(width, height);
    setCameraPosition(centerX, centerY);

    // Midi events from 2000 ticks before to 2000 ticks after.
    setInterval(2000, 2000);

    // We render each channel on a separate canvas.
    canvases = array(Canvas)[];
    loop(16) {
        let canvas = Canvas(width, height);
        canvas::setPosition(centerX, centerY);
        canvas::setColorMod(Color(1f, 1f, 1f), 3);
        canvases ~= canvas;
    }
    spriteSheet = Texture("test.png");
    
    loop {
        // Middle bar
        fillRect(centerX - 1f, 0f, 2f, height, Color(1f, 1f, 1f, 0.2f));
        for(canvas, canvases) {
            canvas::draw(centerX, centerY);
            canvas::clear;
        }
        yield
    }
}

// Called for each note entering the Interval window.
event onNote(Note note) {
    let centerSprite = spriteSheet as Sprite;
    centerSprite::setClip(16, 0, 1, 1);
    centerSprite::setAnchor(0f, 0f);

    Color color = colors[note::getChannel];

    let pitch = 1f - (note::getPitch as float / 128f);

    loop {
        unless(note::isAlive)
            kill

        let w, h =
            width * note::getDuration,
            height / 128f;

        if(w < 4f)
            w = 4f;
        
        centerSprite::setSize(w, h);
        
        pushCanvas(canvases[note::getChannel]);
        let x, y =
            width * (1f - note::getTime),
            height * pitch;

        if(note::isPlaying) {
            let factor = note::getPlayTime;
            let c = lerp(Color(1f, 1f, 1f), color, factor);
            centerSprite::setColor(c);
        }
        else {
            centerSprite::setColor(color);
        }
        centerSprite::draw(x, y);
        popCanvas();
        yield
    }
}