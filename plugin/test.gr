array(Canvas) canvases;
Texture spriteSheet;

let colors = [
    [109, 247, 193],
    [17, 173, 193],
    [96, 108, 129],
    [57, 52, 87],
    [30, 136, 117],
    [91, 179, 97],
    [161, 229, 90],
    [247, 228, 118],
    [249, 146, 82],
    [203, 77, 104],
    [106, 55, 113],
    [201, 36, 100],
    [244, 140, 182],
    [247, 182, 158],
    [155, 156, 130],
    [49, 122, 215]
];

main {
    seq_setInterval(2000, 2000);
    canvases = array(Canvas)[];
    loop(16) {
        let canvas = Canvas(screenSize());
        setPosition(canvas, screenCenter());
        setColorMod(canvas, Color(1f, 1f, 1f), 3);
        canvases ~= canvas;
    }
    spriteSheet = Texture("test.png");
    
    loop {
        fillRect(1280f / 2f - 1f, 0f, 2f, 720f, Color(1f, 1f, 1f, 0.2f));
        for(canvas, canvases) {
            draw(canvas, screenCenter());
            clear(canvas);
        }
        yield;
    }
}

event onNote(Note note) {
    let centerSprite = spriteSheet as Sprite;
    setClip(centerSprite, 16, 0, 1, 1);
    setAnchor(centerSprite, 0f, 0f);

    let width, height = screenSize();
    Color color = colors[getChannel(note)];

    let pitch = 1f - (getPitch(note) as float / 128f);

    loop {
        unless(isAlive(note))
            kill;

        let w, h =
            width * getDuration(note),
            height / 128f;

        if(w < 4f)
            w = 4f;
        
        setSize(centerSprite, w, h);
        
        pushCanvas(canvases[getChannel(note)]);
        let x, y =
            width * (1f - getTime(note)),
            height * pitch;

        if(isPlaying(note)) {
            let factor = getPlayTime(note);
            let c = lerp(Color(1f, 1f, 1f), color, factor);
            setColor(centerSprite, c);
        }
        else {
            setColor(centerSprite, color);
        }
        draw(centerSprite, x, y);
        popCanvas();
        yield;
    }
}