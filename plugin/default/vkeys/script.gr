/** 
 * Copyright: Enalye
 * License: Zlib
 * Authors: Enalye
 */

// Canvas size
let width, height = 1280f, 720f;

// Channels' color
let colors = [
    [109, 247, 193],
    [17, 173, 193],
    [96, 108, 129],
    [57, 52, 87],
    [30, 136, 117],
    [91, 179, 97],
    [161, 229, 90],
    [247, 228, 118],
    [249, 146, 82],
    [203, 77, 104],
    [106, 55, 113],
    [201, 36, 100],
    [244, 140, 182],
    [247, 182, 158],
    [155, 156, 130],
    [49, 122, 215]
];

array(Canvas) canvases;
Canvas mainCanvas;
Texture texture;
let barWidth, barFactor = 2f, 0f;
Color barColor;
float barX;

// Init
main {
    let centerX, centerY = width / 2f, height / 2f;
    Color baseBarColor;
    baseBarColor, barColor = Color(1f, 1f, 1f, 0.2f);

    // Rendering canvas.
    setCameraSize(width, height);
    setCameraPosition(centerX, centerY);
    setCameraClearColor(Color(0.051, 0.082, 0.125));

    /*
        Default interval of ticks to be displayed.
        A too large value can cause slowdowns.
    */
    setInterval(3_000);
    /*
        0 = note are hit on the right side of the screen.
        0.5 = in the center.
        1 = left side.
    */
    setRatio(1f);

    // We render each channel on a separate canvas.
    canvases = array(Canvas)[];
    loop(16) {
        let canvas = Canvas(width, height);
        canvas::setPosition(centerX, centerY);
        canvas::setColorMod(Color(1f, 1f, 1f), 3);
        canvases ~= canvas;
    }
    texture = Texture("note.png");

    mainCanvas = Canvas(width, height);
    mainCanvas::setPosition(centerX, centerY);
    mainCanvas::setColorMod(Color(1f, 1f, 1f), 3);

    barX = width * (1f - getRatio()) - (barWidth / 2f);
    loop {
        for(canvas, canvases) {
            canvas::draw(centerX, centerY);
            canvas::clear;
        }
        // Middle bar
        if(barFactor > 1f)
            barFactor = 1f;
        barColor:a = 0.6f;
        pushCanvas(mainCanvas);
        fillRect(barX, 0f, barWidth, height, lerp(baseBarColor, barColor, barFactor));
        popCanvas();
        if(barFactor < 0f) {
            barFactor = 0f;
        }
        else {
            barFactor -= 0.1f;
        }
        
        mainCanvas::draw(centerX, centerY);
        mainCanvas::clear;
        yield
    }
}

// Called for each note entering the Interval window.
event onNoteEnter(Note note) {
    bool wasHit = false;
    let noteSprite = texture as Sprite;
    noteSprite::setAnchor(0f, 0f);
    noteSprite::setClip(55, 0, 1, 1);

    Color color = colors[note::getChannel];

    let pitch = 1f - (note::getPitch as float / 128f);
    float fadeOut = 1f;
    int time = 0;

    loop {
        unless(note::isAlive)
            kill

        let w, h =
            width / 128f,
            height * note::getDuration;

        if(w < 4f)
            w = 4f;
        
        noteSprite::setSize(w, h);
        
        let x, y =
            width * pitch - getPitchBend(note::getChannel) * w * 2f,
            height * (1f - note::getTime);

        if(note::isPlaying) {
            let factor = note::getPlayTime;
            let c = lerp(Color(1f, 1f, 1f, 1f), color, factor);
            noteSprite::setColor(c);

            notes[note::getPitch] = note::getChannel;

            // Particles
            let particleX = barX + barWidth;
            unless(wasHit) {
                wasHit = true;
                loop(i, 17)
                    spark(particleX, y + h / 2f, -85f + (10f * i) + random(-6f, 6f), random(1.1f, 1.7f), random(5, 30), color, c);
            }
            else if((time % 5) == 0) {
                spark(particleX, y, random(-85f, 5f), random(0.2f, 1.5f), random(5, 20), color, c);
                spark(particleX, y + h, random(5f, 85f), random(0.2f, 1.5f), random(5, 20), color, c);
            }
            barColor = mix(barColor, c);
            barFactor += (1f - factor) * 0.2f;
        }
        else {
            if(note::getPlayTime > 0f)
                kill
            else
                noteSprite::setColor(Color(1f, 1f, 1f, 0.5f));
        }
        pushCanvas(canvases[note::getChannel]);
        noteSprite::draw(x, y);
        popCanvas();
        time ++;
        yield
    }
}

// Create a single particle
task spark(float x, float y, float angle, float speed, int ttl, Color startColor, Color endColor) {
    let particle = createParticle(x, y, angle, speed, ttl);
    unless(particle) kill

    let sprite = particle::getSprite;
    sprite::setBlend(2);
    startColor:a = 1f;
    endColor:a = 1f;
    particle::setColor(startColor);
    float time = 0f;
    while(particle::isAlive) {
        particle::setColor(lerp(startColor, endColor, time / ttl));
        time ++;
        yield
    }
}