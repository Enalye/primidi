/** 
 * Copyright: Enalye
 * License: Zlib
 * Authors: Enalye
 */

// Channels' color
let colors = [
    Color(109, 247, 193),
    Color(17, 173, 193),
    Color(96, 108, 129),
    Color(57, 52, 87),
    Color(30, 136, 117),
    Color(91, 179, 97),
    Color(161, 229, 90),
    Color(247, 228, 118),
    Color(249, 146, 82),
    Color(203, 77, 104),
    Color(106, 55, 113),
    Color(201, 36, 100),
    Color(244, 140, 182),
    Color(247, 182, 158),
    Color(155, 156, 130),
    Color(49, 122, 21)
];

Texture noteTexture;
let barWidth = 6f;
Sprite background;

// Init
action onLoad() {
    setLayerClearColor(-1, Color(0.051, 0.082, 0.125));
    setLayerClearAlpha(-1, 1f);

    /*
        Default interval of ticks to be displayed.
        A too large value can cause slowdowns.
    */
    setInterval(6000);
    /*
        0 = note are hit on the right side of the screen.
        0.5 = in the center.
        1 = left side.
    */
    setRatio(0.8f);
    setLayersCount(17);
    noteTexture = Texture("../note.png");

    loop {
        setLayer(-1);
        if(background)
            background:draw(getCenterX() as real, getCenterY() as real);
        // Middle bar
        setLayer(16);
        real barX = getWidth() * (1f - getRatio()) - (barWidth / 2f);
        fillRect(barX, 0f, barWidth, getHeight() as real, Color(1f, 1f, 1f), 0.2f);
        suspend
    }
}

// Called for each note entering the Interval window.
action onNoteEnter(Note note) {
    handleNote(note);
}

// Called for each note received on the input.
action onNoteInput(Note note) {
    handleNote(note);
}

function handleNote(Note note) {
    let noteSprite = noteTexture as Sprite;
    noteSprite:setAnchor(0f, 0f);

    Color color = colors[note:getChannel];

    let pitch = 1f - (note:getPitch as real / 128f);
    real fadeOut = 1f;

    loop {
        unless(note:isAlive)
            die

        let w, h =
            getWidth() * note:getDuration,
            getHeight() / 128f;

        if(w < 4f)
            w = 4f;
        
        noteSprite:setSize(w, h);
        
        let x, y =
            getWidth() * (1f - note:getTime),
            getHeight() * pitch - getPitchBend(note:getChannel) * h * 2f;

        if(note:isPlaying) {
            let factor = note:getPlayTime;
            let c = lerp(Color(1f, 1f, 1f), color, factor);
            noteSprite:setColor(c);
            noteSprite:setAlpha(1f);
        }
        else {
            if(note:getPlayTime > 0f) {
                noteSprite:setColor(lerp(Color(1f, 1f, 1f), color, fadeOut));
                noteSprite:setAlpha(fadeOut);
                if(fadeOut > 0f) {
                    fadeOut -= 0.025f;
                    if(fadeOut < 0f) {
                        fadeOut = 0f;
                    }
                }
            }
            else {
                noteSprite:setColor(Color(1f, 1f, 1f));
                noteSprite:setAlpha(0.5f);
            }
        }
        setLayer(note:getChannel);
        noteSprite:draw(x, y);
        suspend
    }
}

action onBarEnter(Bar bar) {
    loop {
        unless(bar:isAlive)
            die
        let x = getWidth() * (1f - bar:getTime);

        setLayer(16);
        fillRect(x, 0., 1., getHeight() as real, Color(1f, 1f, 1f), .1);
        bar:getCount as string:print(x + 10., getHeight() - 20.);
        suspend
    }
}

action onFileDrop(string fileName) {
    let tex = Texture(fileName);
    unless(tex) return;
    background = Sprite(tex);
    background:contain(getWidth() as real, getHeight() as real);
}

action onResize(integer x, integer y) {
    Vec2(x, y):trace;
}