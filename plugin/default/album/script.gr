/** 
 * Copyright: Enalye
 * License: Zlib
 * Authors: Enalye
 */
// Channels' color
let colors = [
    Color(109, 247, 193),
    Color(17, 173, 193),
    Color(96, 108, 129),
    Color(57, 52, 87),
    Color(30, 136, 117),
    Color(91, 179, 97),
    Color(161, 229, 90),
    Color(247, 228, 118),
    Color(249, 146, 82),
    Color(203, 77, 104),
    Color(106, 55, 113),
    Color(201, 36, 100),
    Color(244, 140, 182),
    Color(247, 182, 158),
    Color(155, 156, 130),
    Color(49, 122, 21)
];

list(Canvas) canvases;
Texture rectTex;
let barWidth = 6.;
real barX;
integer barCount = 128;
list(Color) barsC1, barsC2;
Sprite cover, background;

// Init
action onLoad() {
    // Rendering canvas.
    setLayerClearColor(-1, Color(.051, .082, .125));
    setLayerClearAlpha(-1, 1.);

    /*
        Default interval of ticks to be displayed.
        A too large value can cause slowdowns.
    */
    setInterval(6_000);
    /*
        0 = note are hit on the right side of the screen.
        0.5 = in the center.
        1 = left side.
    */
    setRatio(.5);
    /*
        We render each channel on a separate layers.
    */
    setLayersCount(16);

    bars = list(real)[];
    bars2 = list(real)[];
    barsC1 = list(Color)[];
    barsC2 = list(Color)[];
    loop(barCount) {
        bars ~= 0.;
        bars2 ~= 0.;
        barsC1 ~= Color(1., 1., 1.);
        barsC2 ~= Color(1., 1., 1.);
    }

    rectTex = Texture("../note.png");
    barX = getWidth() * (1. - getRatio()) - (barWidth / 2.);

    let rect = rectTex as Sprite;
    rect:setAnchor(0., 0.);
    rect:setBlend(Blend.alpha);

    loop {
        setLayer(-1);
        if(background) {
            background:contain(getSize());
            background:draw(getCenter());
        }

        // Middle bars
        let leftBorder, rightBorder = getCenterX() - 200., getCenterX() + 200.;

        rect:setSize(400. + barWidth, barWidth);
        rect:setAlpha(lerp(.2., 1., factors[0]));
        rect:draw(leftBorder - barWidth / 2., (getCenterY() - 200.) - barWidth / 2.);
        rect:setAlpha(lerp(.2., 1., factors[2]));
        rect:draw(leftBorder - barWidth / 2., (getCenterY() + 200.) - barWidth / 2.);
        rect:setSize(barWidth, 400. + barWidth);
        rect:setAlpha(lerp(.2., 1., factors[3]));
        rect:draw(leftBorder - barWidth / 2., (getCenterY() - 200.) - barWidth / 2.);
        rect:setAlpha(lerp(.2., 1., factors[1]));
        rect:draw(rightBorder - barWidth / 2., (getCenterY() - 200.) - barWidth / 2.);

        if(cover) {
            cover:setSize(400., 400.);
            cover:draw(getCenter());
        }

        loop(i, 4) {
            if(factors[i] > 0.)
                factors[i] -= 0.1.;
            else
                factors[i] = 0.;
        }
        loop(i, barCount) {
            real neighbors;
            if(i == 0) {
                neighbors = bars[1] / 2.;
                barsC2[i] = lerp(barsC1[0], barsC1[1], clamp(bars[1] - bars[0], 0.1., 1.));
            }
            else if(i == 127) {
                neighbors = bars[126] / 2.;
                barsC2[i] = lerp(barsC1[127], barsC1[126], clamp(bars[126] - bars[127], 0.1., 1.));
            }
            else {
                neighbors = (bars[i - 1] + bars[i + 1]) / 2.;
                barsC2[i] = lerp(barsC1[i - 1], barsC1[i + 1], (clamp(bars[i + 1] - bars[i - 1], -1., 1.) + 1.) / 2.);
                barsC2[i] = lerp(barsC1[i], barsC2[i], clamp(neighbors - bars[i], 0.1., 1.));
            }
            bars2[i] = lerp(bars[i], neighbors, 0.75);
        }
        loop(i, barCount) {
            barsC1[i] = barsC2[i];
            bars[i] = lerp(bars2[i], 0., .02);
            if(bars[i] < 0.)
                bars[i] = 0.;

            real barSize = lerp(10., 100., bars[i]);
            rect:setSize(getWidth() / 256., barSize + 5f);
            rect:setColor(barsC1[i]);
            rect:setAlpha(1.);
            let a = lerp(2.5, getWidth() - (2.5 + rect:getWidth()), i / 127.);
            rect:draw(a, getHeight() - barSize);
            rect:draw(getWidth() - (a + rect:getWidth()), 0.);
        }
        suspend
    }
}

list(real) factors = [0., 0., 0., 0.];
list(real) bars, bars2;
// When the note is played
action onNoteHit(Note note) {
    bars[note:getPitch] += (note:getVelocity / 127.) * 1.27;
    barsC1[note:getPitch] = colors[note:getChannel];
    loop(i, 4) {
        factors[i] += note:getDuration;
        wait(5);
    }
}

// Called for each note entering the Interval window.
action onNoteEnter(Note note) {
    let noteSprite = rectTex as Sprite;
    noteSprite:setAnchor(0., 0.);

    Color color = colors[note:getChannel];

    let pitch = 1. - (note:getPitch as real / 128.);
    real fadeOut = 1.;

    loop {
        unless(note:isAlive)
            die

        let w, h =
            getWidth() * note:getDuration,
            getHeight() / 128.;
        
        let y = getHeight() * pitch - getPitchBend(note:getChannel) * h * 2.;
        let x = getWidth() * (1. - note:getTime);
        let w2 = 0.;

        if(w < 4.)
            w = 4.;
            
        if(note:getTime < .5) {
            noteSprite:setSize(w, h);
        }
        else {
            let cropX = getCenterX() - x;
            if(w > cropX) {
                w, w2 = cropX, w - cropX;
            }
            noteSprite:setSize(w, h);
        }

        if(note:isPlaying) {
            let factor = note:getPlayTime;
            let c = lerp(Color(1., 1., 1.), color, factor);
            noteSprite:setColor(c);
            noteSprite:setAlpha(1.);

            if(w2 > 0) {
                setLayer(note:getChannel);
                noteSprite:draw(x - 200., y);
                noteSprite:setSize(w2, h);
                noteSprite:draw(getCenterX() + 200., y);
            }
            else {
                setLayer(note:getChannel);
                noteSprite:draw(x - 200., y);
            }
        }
        else {
            if(note:getPlayTime > 0.) {
                noteSprite:setColor(lerp(Color(1., 1., 1.), color, fadeOut));
                noteSprite:setAlpha(fadeOut);
                if(fadeOut > 0.) {
                    fadeOut -= .025;
                    if(fadeOut < 0.) {
                        fadeOut = 0.;
                    }
                }
                setLayer(note:getChannel);
                noteSprite:draw(x - 200., y);
            }
            else {
                noteSprite:setColor(Color(1., 1., 1.));
                noteSprite:setAlpha(.5);
                setLayer(note:getChannel);
                noteSprite:draw(x + 200., y);
            }
        }
        suspend
    }
}

action onFileDrop(string fileName) {
    let tex = Texture(fileName);
    unless(tex) return;
    background = Sprite(tex);
    background:contain(getSize());
    background:setColor(Color(.25, .25, .25));
    background:setAlpha(.75);
    background:setBlend(Blend.additive);

    cover = Sprite(tex);
    cover:setSize(400., 400.);
    cover:setBlend(Blend.alpha);
}