/** 
 * Copyright: Enalye
 * License: Zlib
 * Authors: Enalye
 */

// Channels' color
let colors = [
    Color(109, 247, 193),
    Color(17, 173, 193),
    Color(96, 108, 129),
    Color(57, 52, 87),
    Color(30, 136, 117),
    Color(91, 179, 97),
    Color(161, 229, 90),
    Color(247, 228, 118),
    Color(249, 146, 82),
    Color(203, 77, 104),
    Color(106, 55, 113),
    Color(201, 36, 100),
    Color(244, 140, 182),
    Color(247, 182, 158),
    Color(155, 156, 130),
    Color(49, 122, 21)
];

Texture noteTexture;
let barWidth, barFactor = 2., 0.;
Color barColor;
real barX;
Sprite background;

// Init
action onLoad() {
    Color baseBarColor;
    baseBarColor, barColor = Color(1., 1., 1.);

    setLayerClearColor(-1, Color(0.051, 0.082, 0.125));
    setLayerClearAlpha(-1, 1.);

    /*
        Default interval of ticks to be displayed.
        A too large value can cause slowdowns.
    */
    setInterval(6_000);
    /*
        0 = note are hit on the right side of the screen.
        0.5 = in the center.
        1 = left side.
    */
    setRatio(.8);

    setLayersCount(17);

    noteTexture = Texture("../note.png");

    loop {
        setLayer(-1);
        if(background)
            background:draw(getCenterX() as real, getCenterY() as real);
        // Middle bar
        if(barFactor > 1.)
            barFactor = 1.;
        setLayer(16);
        barX = getWidth() * (1. - getRatio()) - (barWidth / 2.);
        rectangle(barX, 0., barWidth, getHeight() as real, true, lerp(baseBarColor, barColor, barFactor), lerp(.2, .6, barFactor));
        if(barFactor < 0.) {
            barFactor = 0.;
        }
        else {
            barFactor -= .1;
        }
        suspend
    }
}

action onNoteInput(Note note) {
    let noteSprite = noteTexture as Sprite;
    noteSprite:setAnchor(0., 0.);

    Color color = colors[note:getChannel];

    let pitch = 1. - (note:getPitch as real / 128f);
    real fadeOut = 1.;
    integer time = 0;

    let w, h =
        getWidth() * note:getDuration,
        getHeight() / 128.;
    let particleX = barX + barWidth;

    let x, y =
        getWidth() * (1. - note:getTime),
        getHeight() * pitch - getPitchBend(note:getChannel) * h * 2.;

    loop(i, 17)
        spark(particleX, y + h / 2., -85. + (10. * i) + random(-6., 6.), random(1.1, 1.7), random(5, 30), color, color);

    loop {
        unless(note:isAlive)
            die

        w, h =
            getWidth() * note:getDuration,
            getHeight() / 128f;

        noteSprite:setSize(w, h);
            
        x, y =
            getWidth() * (1. - note:getTime),
            getHeight() * pitch - getPitchBend(note:getChannel) * h * 2.;

        if(note:isPlaying) {
            let factor = note:getPlayTime;
            let c = lerp(Color(1., 1., 1.), color, factor);
            noteSprite:setColor(c);
            noteSprite:setAlpha(1.);

            // Particles
            if((time % 5) == 0) {
                spark(particleX, y, random(-85., 5.), random(.2, 1.5), random(5, 20), color, c);
                spark(particleX, y + h, random(5., 85.), random(.2, 1.5), random(5, 20), color, c);
            }
            barColor = mix(barColor, c);
            barFactor += (1. - factor) * .2;
        }
        else {
            if(note:getPlayTime > 0.) {
                noteSprite:setColor(lerp(Color(1., 1., 1.), color, fadeOut));
                noteSprite:setAlpha(fadeOut);
                if(fadeOut > 0.) {
                    fadeOut -= .025;
                    if(fadeOut < 0.) {
                        fadeOut = 0.;
                    }
                }
            }
            else {
                noteSprite:setColor(Color(1., 1., 1.));
                noteSprite:setAlpha(.5);
            }
        }
        setLayer(note:getChannel);
        noteSprite:draw(x, y);
        time ++;
        suspend
    }
}

// Called for each note entering the Interval window.
action onNoteEnter(Note note) {
    boolean wasHit = false;
    let noteSprite = noteTexture as Sprite;
    noteSprite:setAnchor(0., 0.);

    Color color = colors[note:getChannel];

    let pitch = 1. - (note:getPitch as real / 128.);
    real fadeOut = 1.;
    integer time = 0;

    loop {
        unless(note:isAlive)
            die

        let w, h =
            getWidth() * note:getDuration,
            getHeight() / 128.;

        if(w < 4.)
            w = 4.;
        
        noteSprite:setSize(w, h);
        
        let x, y =
            getWidth() * (1. - note:getTime),
            getHeight() * pitch - getPitchBend(note:getChannel) * h * 2.;;

        if(note:isPlaying) {
            let factor = note:getPlayTime;
            let c = lerp(Color(1., 1., 1.), color, factor);
            noteSprite:setColor(c);
            noteSprite:setAlpha(1.);

            // Particles
            let particleX = barX + barWidth;
            unless(wasHit) {
                wasHit = true;
                loop(i, 17)
                    spark(particleX, y + h / 2., -85. + (10. * i) + random(-6., 6.), random(1.1, 1.7), random(5, 30), color, c);
            }
            else if((time % 5) == 0) {
                spark(particleX, y, random(-85., 5.), random(.2, 1.5), random(5, 20), color, c);
                spark(particleX, y + h, random(5., 85.), random(.2, 1.5), random(5, 20), color, c);
            }
            barColor = mix(barColor, c);
            barFactor += (1. - factor) * .2;
        }
        else {
            if(note:getPlayTime > 0.) {
                noteSprite:setColor(lerp(Color(1., 1., 1.), color, fadeOut));
                noteSprite:setAlpha(fadeOut);
                if(fadeOut > 0.) {
                    fadeOut -= .025;
                    if(fadeOut < 0.) {
                        fadeOut = 0.;
                    }
                }
            }
            else {
                noteSprite:setColor(Color(1., 1., 1.));
                noteSprite:setAlpha(.5);
            }
        }
        setLayer(note:getChannel);
        noteSprite:draw(x, y);
        time ++;
        suspend
    }
}

// Create a single particle
task spark(real x, real y, real angle, real speed, integer ttl, Color startColor, Color endColor) {
    let particle = Particle(x, y, angle, speed, ttl);
    unless(particle) die

    let sprite = particle:getSprite;
    sprite:setBlend(Blend.additive);
    particle:setColor(startColor);
    particle:setAlpha(1.);
    real time = 0.;
    while(particle:isAlive) {
        particle:setColor(lerp(startColor, endColor, time / ttl));
        time ++;
        suspend
    }
}

action onFileDrop(string fileName) {
    let tex = Texture(fileName);
    unless(tex) return;
    background = Sprite(tex);
    background:contain(getWidth() as real, getHeight() as real);
}