/** 
 * Copyright: Enalye
 * License: Zlib
 * Authors: Enalye
 */
Canvas mainCanvas;
Texture spriteSheet, smallParticle, bigParticle;
let barWidth, barFactor, hitFactor = 2., 0.;
Color barColor;
float barX;

// Channels' color
let colors = [
    Color(109, 247, 193),
    Color(17, 173, 193),
    Color(96, 108, 129),
    Color(57, 52, 87),
    Color(30, 136, 117),
    Color(91, 179, 97),
    Color(161, 229, 90),
    Color(247, 228, 118),
    Color(249, 146, 82),
    Color(203, 77, 104),
    Color(106, 55, 113),
    Color(201, 36, 100),
    Color(244, 140, 182),
    Color(247, 182, 158),
    Color(155, 156, 130),
    Color(49, 122, 21)
];

main {
    Color baseBarColor;
    baseBarColor, barColor = Color(1., 1., 1.);
    spriteSheet = Texture("test.png");
    smallParticle = Texture("small.png");
    bigParticle = Texture("big.png");

    setLayerClearColor(-1, Color(0.051, 0.082, 0.125));
    setLayerClearAlpha(-1, 1f);

    /*
        Default interval of ticks to be displayed.
        A too large value can cause slowdowns.
    */
    setInterval(6000);
    /*
        0 = note are hit on the right side of the screen.
        0.5 = in the center.
        1 = left side.
    */
    setRatio(.8);
    barX = getWidth() * (1f - getRatio()) - (barWidth / 2f);

    // We render each channel on a separate canvas.
    setLayersCount(17);

    // Background
    let bg = Texture("background.png") as Sprite;
    bg:setSize(getWidth() as float, getHeight() as float);

    displayInfo();

    int time = 0;
    loop {
        setLayer(-1);
        if((time % 30) == 0)
            lightEffect();

        bg:draw(getCenterX() as float, getCenterY() as float);
        // Middle bar
        if(barFactor > 1.)
            barFactor = 1.;
        setLayer(16);
        fillRect(barX, 0., barWidth, getHeight() as float, lerp(baseBarColor, barColor, barFactor), lerp(.2, .6, barFactor));
        if(barFactor < 0.) {
            barFactor = 0.;
        }
        else {
            barFactor -= .1;
        }
        time ++;
        yield
    }
}

task lightEffect() {
    let color = Color(rand(), rand(), rand());
    let particle = Particle(rand(0., getWidth() + 50.), -64., rand(95., 105.), rand(0.5f, 1f), 2_000);
    
    unless(particle)
        kill

    let sprite = smallParticle as Sprite;
    sprite:setBlend(Blend.additive);

    float particleSize = 128.;
    if(rand() >= .5)
        particleSize = 64.;

    sprite:setSize(particleSize, particleSize);
    particle:setSprite(sprite);
    particle:setColor(color);
    particle:setAlpha(.8);

    float baseAngle = particle:getAngle;
    float time = 0.;

    while(particle:isAlive) {
        particle:setColor(color);
        particle:setAlpha(.6 + cos(time * .0123) * .4 + barFactor * .4);
        sprite:setSize(particleSize + barFactor * particleSize * 2., particleSize + particleSize * barFactor * 2f);
        particle:setAngle(baseAngle + cos(time * .01) * 50.);
        time ++;
        yield
    }
}

task spark(float x, float y, float angle, float speed, int ttl, Color startColor, Color endColor) {
    let particle = Particle(x, y, angle, speed, ttl);

    unless(particle)
        kill

    let sprite = bigParticle as Sprite;
    sprite:setSize(3., 3.);
    sprite:setBlend(Blend.additive);

    particle:setSprite(sprite);
    particle:setColor(startColor);

    float time = 0.;
    while(particle:isAlive) {
        particle:setColor(lerp(startColor, endColor, time / ttl));
        time ++;
        yield
    }
}

float displayInfoFactor = 0.;
string trackName = "No Title";
bool isInfoRunning = false;
task displayInfo() {
    let coverSprite = Texture("cover.png") as Sprite;
    let shadowSprite = Texture("shadow.png") as Sprite;
    coverSprite:setSize(300., 300.);
    shadowSprite:setSize(300., 300.);

    let font = TrueTypeFont("Cascadia.ttf", 32);

    float coverX, coverY = getWidth() - 200., 350.;

    Color infoColor = Color(1., 1., 1.);

    let barSprite = spriteSheet as Sprite;
    barSprite:setClip(16, 0, 1, 1);
    barSprite:setAnchor(1., 1.);
    Color clear = Color(0., 0., 0.);

    loop {
        if(isInfoRunning and (getMidiTime() + 11_000. >= getMidiDuration())) {
            isInfoRunning = false;
            endTask();
        }
        let trackWidth, trackHeight = getTextSize(trackName, font);
        float trackNameX = (getWidth() - trackWidth / 2.) - 50.;

        coverSprite:setColor(infoColor);
        coverSprite:setAlpha(displayInfoFactor);
        shadowSprite:setColor(infoColor);
        shadowSprite:setAlpha(displayInfoFactor);
        setColor(infoColor);
        setAlpha(displayInfoFactor)
        shadowSprite:draw(coverX - 16., coverY + 16.);
        coverSprite:draw(coverX, coverY);
        trackName:print(trackNameX, getHeight() - 100.);

        if(displayInfoFactor > 0f)
            spark(getWidth() as float, ((getHeight() - 100.) - trackHeight / 2.) + rand(0., trackHeight), 180f, rand(2f, 3f), 180, infoColor, clear);

        barSprite:setColor(infoColor);
        barSprite:setAlpha(displayInfoFactor);
        if(displayInfoFactor < .5) {
            barSprite:setSize(lerp(0., trackWidth, easeInSine(displayInfoFactor * 2.)), 5.);
            barSprite:draw(trackNameX + trackWidth / 2f, getHeight() - 70.);
        }
        else if(displayInfoFactor < 1f) {
            float t = easeOutSine((displayInfoFactor - .5) * 2.);
            barSprite:setSize(lerp(trackWidth, 0., t), 5.);
            barSprite:draw(trackNameX + lerp((trackWidth / 2.), -trackWidth / 2., t), getHeight() - 70f);
        }
        yield
    }
}

// Called when a midi file is starting.
event onStart() {
    trackName = getMidiName();
    displayInfoFactor = 0.;
    2:seconds:sleep;

    float time = 0.;
    while(isMidiPlaying()) {
        displayInfoFactor = lerp(0., 1., easeInOutSine(time));
        if(time > 1f) {
            displayInfoFactor = 1.;
            isInfoRunning = true;
            kill
        }
        time += .0025;
        yield
    }
}

// Called when a midi file is ending.
event onEnd() {
    if(isInfoRunning)
        endTask();
}

task endTask() {
    isInfoRunning = false;
    float time = 0.;
    displayInfoFactor = 0.;
    loop {
        displayInfoFactor = lerp(1., 0., easeInOutSine(time));
        if(time > 1.) {
            displayInfoFactor = 0.;
            kill
        }
        time +=  .0025;
        yield
    }
}

// Called for each note entering the Interval window.
event onNoteEnter(Note note) {
    handleNote(note);
}

// Called for each note received on the input.
event onNoteInput(Note note) {
    handleNote(note);
}

func handleNote(Note note) {
    bool wasHit = false;
    let noteSprite = spriteSheet as Sprite;
    noteSprite:setClip(16, 0, 1, 1);
    noteSprite:setAnchor(0., 0.);

    Color color = colors[note:getChannel];

    let pitch = 1. - (note:getPitch as float / 128.);
    float fadeOut = 1.;
    int time = 0;

    loop {
        unless(note:isAlive)
            kill

        let w, h =
            getWidth() * note:getDuration,
            getHeight() / 128.;

        if(w < 4.)
            w = 4.;
        
        noteSprite:setSize(w, h);
        
        let x, y =
            getWidth() * (1. - note:getTime),
            getHeight() * pitch;

        if(note:isPlaying) {
            y -= getPitchBend(note:getChannel) * h * 2.;
            let factor = note:getPlayTime;
            let c = lerp(Color(1., 1., 1.), color, factor);
            noteSprite:setColor(c);

            // Particles
            let particleX = barX + barWidth;
            unless(wasHit) {
                wasHit = true;
                loop(i, 17) {
                    spark(particleX, y + h / 2f, -85f + (10f * i) + rand(-6f, 6f), rand(1.1f, 1.7f), rand(5, 30), color, c);
                }
            }
            else if((time % 5) == 0) {
                spark(particleX, y, rand(-85f, 5f), rand(0.2f, 1.5f), rand(5, 20), color, c);
                spark(particleX, y + h, rand(5f, 85f), rand(0.2f, 1.5f), rand(5, 20), color, c);
            }
            barColor = mix(barColor, c);
            barFactor += (1. - factor) * 0.2;
            hitFactor += barFactor;
        }
        else {
            if(note:getPlayTime > 0f) {
                noteSprite:setColor(lerp(Color(1f, 1f, 1f), color, fadeOut));
                noteSprite:setAlpha(fadeOut);
                if(fadeOut > 0f) {
                    fadeOut -= 0.025f;
                    if(fadeOut < 0f) {
                        fadeOut = 0f;
                    }
                }
            }
            else {
                noteSprite:setColor(Color(1., 1., 1.));
                noteSprite:setAlpha(0.5f);
            }
        }
        setLayer(note:getChannel);
        noteSprite:draw(x, y);
        time ++;
        yield
    }
}